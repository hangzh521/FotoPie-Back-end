name: Docker ECR Deploy

on:
  push:
    branches:
      - DO-05-Hang

env:
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  ECR_REGISTRY: 271584491311.dkr.ecr.ap-southeast-2.amazonaws.com
  ECR_REPOSITORY: node-app
  IMAGE_TAG: latest
  FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
  JWT_ACTIVATE_SECRET_KEY : ${{ secrets.JWT_ACTIVATE_SECRET_KEY }}
  MONGO_URL: ${{ secrets.MONGO_URL }}
  ACCESS_TOKEN_SECRET_PRIVATE: ${{ secrets.ACCESS_TOKEN_SECRET_PRIVATE }}
  ACCESS_TOKEN_SECRET_PUBLIC: ${{ secrets.ACCESS_TOKEN_SECRET_PUBLIC }}
  REFRESH_TOKEN_SECRET_PRIVATE: ${{ secrets.REFRESH_TOKEN_SECRET_PRIVATE }}
  REFRESH_TOKEN_SECRET_PUBLIC: ${{ secrets.REFRESH_TOKEN_SECRET_PUBLIC }}
  MAILGUN_API_KEY: ${{ secrets.MAILGUN_API_KEY }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  WEBHOOK_SIGNING_SECRET: ${{ secrets.WEBHOOK_SIGNING_SECRET }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  EVERYPIXEL_ID: ${{ secrets.EVERYPIXEL_ID }}
  EVERYPIXEL_API_KEY: ${{ secrets.EVERYPIXEL_API_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      run: |
        aws ecr get-login-password --region ${{ env.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
   
    - name: Build and tag Docker image
      id: build-image
      run: |
        docker build  --build-arg ACCESS_TOKEN_SECRET_PRIVATE="$ACCESS_TOKEN_SECRET_PRIVATE" \
         --build-arg ACCESS_TOKEN_SECRET_PUBLIC="$ACCESS_TOKEN_SECRET_PUBLIC" \
         --build-arg DOMAIN="$DOMAIN" \
         --build-arg EMAIL_CONFIRMATION_URL="$EMAIL_CONFIRMATION_URL" \
         --build-arg EMAIL_SEND="$EMAIL_SEND" \
         --build-arg EXPIRE="$EXPIRE" \
         --build-arg JWT_ACTIVIATE_SECRET_KEY="$JWT_ACTIVIATE_SECRET_KEY" \
         --build-arg JWT_SECRET_KEY="$JWT_SECRET_KEY" \
         --build-arg MAILGUN_APIKEY="$MAILGUN_APIKEY" \
         --build-arg MAILGUN_API_KEY="$MAILGUN_API_KEY" \
         --build-arg MAILGUN_DOMAIN="$MAILGUN_DOMAIN" \
         --build-arg MONGO_URL="$MONGO_URL" \
         --build-arg REFRESH_TOKEN_SECRET_PRIVATE="$REFRESH_TOKEN_SECRET_PRIVATE" \
         --build-arg REFRESH_TOKEN_SECRET_PUBLIC="$REFRESH_TOKEN_SECRET_PUBLIC" \
         --build-arg SALT="$SALT" \
         --build-arg SENDER_EMAIL="$SENDER_EMAIL" \
         --build-arg SENDER_EMAIL_PASSWORD="$SENDER_EMAIL_PASSWORD" \
         --build-arg SERVER_PORT="$SERVER_PORT" \
         -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . \
         -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} 


    - name: Tag and Push Docker image to Amazon ECR
      run: |
         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 
         docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}

    - name: Update ECS service
      run: |
        aws ecs update-service \
        --cluster $CLUSTER_NAME \
        --service $SERVICE_NAME \
        --task-definition $TASK_DEFINITION \
        --force-new-deployment \
        